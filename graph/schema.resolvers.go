package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.71

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"gqlgen-todos/graph/model"
	"gqlgen-todos/internal/db"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	id := uuid.NewString()

	todo, err := r.Resolver.DB.CreateTodo(ctx, db.CreateTodoParams{
		ID:     id,
		Text:   input.Text,
		Done:   false,
		UserID: input.UserID,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to insert todo: %w", err)
	}

	return &model.Todo{
		ID:     todo.ID,
		Text:   todo.Text,
		Done:   todo.Done,
		UserID: todo.UserID,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos, err := r.Resolver.DB.GetTodos(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to query todos: %w", err)
	}

	var models []*model.Todo
	for _, todo := range todos {
		models = append(models, &model.Todo{
			ID:     todo.ID,
			Text:   todo.Text,
			Done:   todo.Done,
			UserID: todo.UserID,
		})
	}

	return models, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	user, err := r.Resolver.DB.GetUser(ctx, obj.UserID)
	if err != nil {
		return nil, fmt.Errorf("failed to find user (id=%s): %w", obj.UserID, err)
	}

	return &model.User{
		ID:   user.ID,
		Name: user.Name,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
