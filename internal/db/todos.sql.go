// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: todos.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (id, text, done, user_id)
VALUES ($1, $2, $3, $4)
RETURNING id, text, done, user_id
`

type CreateTodoParams struct {
	ID     string
	Text   string
	Done   bool
	UserID string
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo,
		arg.ID,
		arg.Text,
		arg.Done,
		arg.UserID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Done,
		&i.UserID,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, text, done, user_id
FROM todos
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Done,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
